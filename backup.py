#!/usr/bin/env python3
import os
import shutil
from datetime import datetime

DB_NAME = "users.db"
BACKUP_DIR = "backups"

def create_backup():
    if not os.path.exists(DB_NAME):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {BACKUP_DIR}/")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{BACKUP_DIR}/users_backup_{timestamp}.db"
    
    try:
        shutil.copy2(DB_NAME, backup_name)
        file_size = os.path.getsize(backup_name)
        file_size_mb = file_size / (1024 * 1024)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë")
        
        backups = [f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')]
        print(f"üìÅ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def list_backups():
    if not os.path.exists(BACKUP_DIR):
        print(f"‚ùå –ü–∞–ø–∫–∞ {BACKUP_DIR}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    backups = sorted([f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')])
    
    if not backups:
        print(f"üìÅ –í –ø–∞–ø–∫–µ {BACKUP_DIR}/ –Ω–µ—Ç –±—ç–∫–∞–ø–æ–≤")
        return
    
    print(f"\nüìÅ –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –≤ {BACKUP_DIR}/:\n")
    for idx, backup in enumerate(backups, 1):
        filepath = os.path.join(BACKUP_DIR, backup)
        size = os.path.getsize(filepath) / (1024 * 1024)
        mtime = datetime.fromtimestamp(os.path.getmtime(filepath))
        print(f"{idx}. {backup}")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {size:.2f} –ú–ë")
        print(f"   üìÖ –î–∞—Ç–∞: {mtime.strftime('%d.%m.%Y %H:%M:%S')}\n")

def cleanup_old_backups(keep_last=10):
    if not os.path.exists(BACKUP_DIR):
        return
    
    backups = sorted([f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')])
    
    if len(backups) <= keep_last:
        print(f"‚úÖ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return
    
    to_delete = backups[:-keep_last]
    
    for backup in to_delete:
        filepath = os.path.join(BACKUP_DIR, backup)
        try:
            os.remove(filepath)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {backup}: {e}")
    
    print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–æ {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤")

if __name__ == "__main__":
    print("=" * 50)
    print("üîÑ –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î")
    print("=" * 50)
    print()
    
    if create_backup():
        print()
        list_backups()
        print()
        cleanup_old_backups(keep_last=10)
    
    print()
    print("=" * 50)
    print("–ì–æ—Ç–æ–≤–æ!")
    print("=" * 50)

